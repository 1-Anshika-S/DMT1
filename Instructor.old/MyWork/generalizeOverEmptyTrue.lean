/- @@@
## Generalization over Empty Sets (of Proofs)

Any propsition quantified universally over an
empty set or type is valid, because it's true for
all values in that set or type, and because there
are none, in particular.

Another way to see that this makes sense is to view
universal quanitification as logical conjunction of
the family of propositions generated by the predicate
on the right specialized to a proposition about each
partixular value in the set or type.

The generalized conjunction of such a paramterized
family of propositions could be thought of as being
computed by recursion. With more than zero terms, you
take the conjunction of the first time with the result
of aplying this procedure to the rest. To preserve the
result when finally combining it with the answer in the
case where there are zero conjuncts to conjoin, the result
for the empty case has to be *true*. Yet another way to
see it: *true* is both a left and right identity element
for logical (truth-functional) *And*. You should check
your undertsanding by finishing this proof that True *is*
both a left and a right identity element for *And*.

### Aside: True is the Identity Element for ∧
@@@ -/

theorem leftRightIdentityAndTrue :
/-@@@
Note quantification over all propositions. So now we're
seeing that it makes eminent sense to express ideas at a
level of generality not expressible in first-order theory.
But here we have captured exactly the abstraction that we
want. You can finish the proof here that True really is an
identity, both left and right, for any proposition.
@@@ -/
∀ (P : Prop),
  ((P ∧ True) ↔ P) ∧
  ((True ∧ P) ↔ P)
:=
fun (p : Prop) =>
  And.intro
    (Iff.intro
      (fun h => h.left)
      (fun h => ⟨ h, True.intro⟩))
    (sorry)
